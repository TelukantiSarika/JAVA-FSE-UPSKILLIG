// 1. JS Basics & Setup
console.log("Hello from the Community Hub!");
window.addEventListener("load", () => alert("Page loaded successfully!"));

// 2. Syntax, Data Types, and Operators
const eventTitle = "Nature Walk";
const eventDay = "2025-06-15";
let seatsLeft = 30;
let eventDetails = `${eventTitle} is on ${eventDay}. Available seats: ${seatsLeft}`;
console.log(eventDetails);

// Simulate a registration
seatsLeft--;
console.log(`Seats after one registration: ${seatsLeft}`);

// 3. Conditionals, Loops, and Error Handling
let allEvents = [
  { name: "Art Show", date: "2025-06-10", seats: 20 },
  { name: "Tech Talk", date: "2025-05-20", seats: 0 },
  { name: "Food Fest", date: "2025-07-01", seats: 15 }
];

function displayUpcomingEvents(events) {
  const today = new Date().toISOString().split("T")[0];
  events.forEach(event => {
    if (event.date > today && event.seats > 0) {
      console.log(`📅 ${event.name} - ${event.date} - Seats: ${event.seats}`);
    } else {
      console.log(`⛔ Skipped event: ${event.name}`);
    }
  });
}

try {
  displayUpcomingEvents(allEvents);
} catch (e) {
  console.error("Error loading events:", e.message);
}

// 4. Functions, Closures, Callbacks
function createEvent(name, date, seats, type) {
  return { name, date, seats, type };
}

function registerAttendee(event) {
  if (event.seats > 0) {
    event.seats--;
    console.log(`✅ Registered to ${event.name}. Remaining: ${event.seats}`);
  } else {
    console.warn(`⚠️ No seats left for ${event.name}`);
  }
}

function categoryRegistrationTracker(category) {
  let count = 0;
  return function () {
    count++;
    console.log(`Total registrations for ${category}: ${count}`);
  };
}

const musicCounter = categoryRegistrationTracker("Music");

function filterBy(events, conditionFn) {
  return events.filter(conditionFn);
}

// 5. Objects and Prototypes
function Event(name, date, seats) {
  this.name = name;
  this.date = date;
  this.seats = seats;
}

Event.prototype.checkAvailability = function () {
  return this.seats > 0;
};

let paintingWorkshop = new Event("Painting Workshop", "2025-06-22", 12);
console.log("Availability:", paintingWorkshop.checkAvailability());

console.log(Object.entries(paintingWorkshop));

// 6. Arrays and Methods
let eventsArray = [];
eventsArray.push(createEvent("Music Night", "2025-07-05", 25, "Music"));
eventsArray.push(createEvent("Science Fair", "2025-06-30", 40, "Education"));

let musicOnly = eventsArray.filter(evt => evt.type === "Music");
let displayCards = eventsArray.map(evt => `🎫 ${evt.name} on ${evt.date}`);

console.log("Music Events:", musicOnly);
console.log("Event Cards:", displayCards);

// 7. DOM Manipulation
const eventContainer = document.querySelector("#eventContainer");

function renderEvents(events) {
  eventContainer.innerHTML = "";
  events.forEach(evt => {
    let card = document.createElement("div");
    card.className = "event-card";
    card.innerHTML = `<h3>${evt.name}</h3><p>${evt.date}</p><p>Seats: ${evt.seats}</p>`;
    eventContainer.appendChild(card);
  });
}

renderEvents(eventsArray);

// 8. Event Handling
document.querySelector("#filterCategory").onchange = function (e) {
  const selected = e.target.value;
  let filtered = eventsArray.filter(evt => evt.type === selected);
  renderEvents(filtered);
};

document.querySelector("#searchBox").addEventListener("keydown", function (e) {
  let term = e.target.value.toLowerCase();
  let result = eventsArray.filter(evt => evt.name.toLowerCase().includes(term));
  renderEvents(result);
});

// 9. Async, Promises, Async/Await
function fetchMockEvents() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve([
        { name: "Yoga Camp", date: "2025-07-20", seats: 50, type: "Health" }
      ]);
    }, 1000);
  });
}

function loadEvents() {
  document.querySelector("#loader").style.display = "block";
  fetchMockEvents()
    .then(data => {
      eventsArray = [...eventsArray, ...data];
      renderEvents(eventsArray);
    })
    .catch(err => console.error("Error loading:", err))
    .finally(() => document.querySelector("#loader").style.display = "none");
}

// Alternative async/await version
async function loadEventsAsync() {
  document.querySelector("#loader").style.display = "block";
  try {
    let data = await fetchMockEvents();
    eventsArray.push(...data);
    renderEvents(eventsArray);
  } catch (err) {
    console.error(err);
  }
  document.querySelector("#loader").style.display = "none";
}

// 10. Modern JS
function greetUser(name = "Guest") {
  console.log(`Hello, ${name}!`);
}

const [firstEvent] = eventsArray;
const { name: eventName, date: eventDate } = firstEvent;

let clonedEvents = [...eventsArray];

// 11. Form Handling
document.querySelector("#registerForm").addEventListener("submit", function (e) {
  e.preventDefault();
  let { userName, userEmail, eventSelect } = e.target.elements;

  if (!userName.value || !userEmail.value) {
    alert("Please fill in all details.");
    return;
  }

  console.log(`Name: ${userName.value}, Email: ${userEmail.value}, Event: ${eventSelect.value}`);
});

// 12. AJAX & Fetch Simulation
function postRegistration(data) {
  return new Promise((resolve) => {
    setTimeout(() => resolve({ success: true }), 1500);
  });
}

document.querySelector("#registerForm").addEventListener("submit", function (e) {
  e.preventDefault();
  let formData = {
    name: e.target.userName.value,
    email: e.target.userEmail.value,
    event: e.target.eventSelect.value
  };

  postRegistration(formData).then(response => {
    if (response.success) {
      alert("🎉 Registration successful!");
    }
  });
});

// 13. Debugging
console.log("Form submitted...");
debugger; // Use browser DevTools to inspect here
// Check Network tab after fetch/post call

// 14. jQuery and JS Frameworks
// Assuming jQuery is loaded in HTML
$(document).ready(function () {
  $('#registerBtn').click(() => alert("Registering..."));
  $('.event-card').fadeIn(600).delay(1000).fadeOut(600);
});


